n = length(algebra$control)
a = 0.05
stdDev = sd(algebra$control)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
experimental = algebra$experimental
n = length(experimental)
a = 0.05
stdDev = sd(experimental)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the experimental group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$experimental)
a = 0.05
stdDev = sd(algebra$experimental)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the experimental group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$experimental)
a = 0.05
stdDev = sd(algebra$experimental)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the experimental group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$control)
a = 0.05
stdDev = sd(algebra$control)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the control group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
Bn = length(algebra$control)
Ba = 0.05
BstdDev = sd(algebra$control)
confidence = 1 - a
BlowerChi = qchisq(a / 2, df = n - 1)
BupperChi = qchisq(1 - (a / 2), df = n - 1)
BlowerBound = sqrt((Bn - 1) * (BstdDev^2 / BupperChi))
BupperBound = sqrt((Bn - 1) * (BstdDev^2 / BlowerChi))
cat("95% Confidence Interval for the standard deviation of the control group: (", round(BlowerBound, 4), ", ", round(BupperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$control)
a = 0.05
stdDev = sd(algebra$control)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the control group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$control)
a = 0.05
stdDev = sd(algebra$control)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the control group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
n = length(algebra$control)
a = 0.05
stdDev = sd(algebra$control)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the control group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
n = length(algebra$experimental)
a = 0.05
stdDev = sd(algebra$experimental)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the experimental group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
View(algebra)
n = length(na.ommit(algebra$experimental))
exp = na.omit(algebra$experimental)
n = length(exp)
a = 0.05
stdDev = sd(exp)
confidence = 1 - a
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the standard deviation of the experimental group: (", round(lowerBound, 4), ", ", round(upperBound, 4), ")\n")
F = var.test(control, exp, alternative = "greater")
cat("F-statistic:", round(F$statistic, 4), "\n")
F = var.test(control, exp, alternative = "greater")
cat("F-statistic:", round(F$statistic, 4), "\n")
cat("Degrees of freedom:", F$parameter[1], "and", F$parameter[2], "\n")
F = var.test(control, exp, alternative = "greater")
cat("F-statistic:", round(F$statistic, 4), "\n")
cat("Degrees of freedom:", F$parameter[1], "and", F$parameter[2], "\n")
cat("p-value:", round(F$p.value, 4), "\n")
propsCombined = (x1 + x2) / (n1 + n2)
x1 = 69
n1 = 21000
x2 = 113
n2 = 22000
propsCombined = (x1 + x2) / (n1 + n2)
nullStdError = sqrt(propsCombined * (1 - propsCombined) * (1 / n1 + 1 / n2))
z <- (p2 - p1) / nullStdError
batteries = read.delim("battery.txt", header = T, sep = ",")
# Calculate descriptive statistics by brand
library(dplyr)
descriptive_stats <- battery_data %>%
group_by(Brand) %>%
summarize(
Mean = mean(Charge),
SD = sd(Charge),
Count = n()
)
batteries = read.delim("battery.txt", header = T, sep = ",")
# Calculate descriptive statistics by brand
library(dplyr)
descriptive_stats <- batteries %>%
group_by(Brand) %>%
summarize(
Mean = mean(Charge),
SD = sd(Charge),
Count = n()
)
batteries = read.delim("battery.txt", header = T, sep = ",")
brands = unique(batteries$Brand)
for (brand in brands) {
subset = batteries[batteries$Brand == brand, "Charge"]
mean = mean(subset)
stdDev = sd(subset)
cat("Brand:", brand, "\n")
cat("Mean:", round(mean, 4), "\n")
cat("Standard Deviation:", round(stdDev, 4), "\n\n")
}
batteries = read.delim("battery.txt", header = T, sep = ",")
brandMean = tapply(Hours, Brand, mean)
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b, ANOVA
anova = aov(Charge ~ Brand, data = batteries)
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b, ANOVA
anova = aov(Hours ~ Brand, data = batteries)
data <- matrix(c(739, 70, 44, 853,
492, 130, 38, 660,
198, 143, 27, 368,
51,  84, 14, 149,
41, 114, 17, 172),
nrow = 5, byrow = TRUE)
# Assign row and column names
rownames(data) = c("Under 50", "50–179", "180–499", "500–999", "1000 and over")
colnames(data) = c("Full Owner", "Part Owner", "Tenant", "Total")
# Remove the 'Total' column
data = data[, -4]
# Perform the Chi-Square Test
chiSqr = chisq.test(data)
# Output the results
cat("Chi-Square Test Results:\n")
print(chi_square_test)
data <- matrix(c(739, 70, 44, 853,
492, 130, 38, 660,
198, 143, 27, 368,
51,  84, 14, 149,
41, 114, 17, 172),
nrow = 5, byrow = TRUE)
# Assign row and column names
rownames(data) = c("Under 50", "50–179", "180–499", "500–999", "1000 and over")
colnames(data) = c("Full Owner", "Part Owner", "Tenant", "Total")
# Remove the 'Total' column
data = data[, -4]
# Perform the Chi-Square Test
chiSqr = chisq.test(data)
# Output the results
cat("Chi-Square Test Results:\n")
print(chiSqr)
# Observed and Expected Counts
cat("\nObserved Counts:\n")
print(chiSqr$observed)
cat("\nExpected Counts:\n")
print(round(chiSqr$expected, 2))
algebra = read.delim("algebra.txt", header = T, sep = ",")
attach(algebra)
control = algebra$control
n = length(control)
a = 0.05
stdDev = sd(control)
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the control group: (",
round(lowerBound, 4), ", ",
round(upperBound, 4), ")\n")
exp = na.omit(algebra$experimental)
n = length(exp)
a = 0.05
stdDev = sd(exp)
lowerChi = qchisq(a / 2, df = n - 1)
upperChi = qchisq(1 - (a / 2), df = n - 1)
lowerBound = sqrt((n - 1) * (stdDev^2 / upperChi))
upperBound = sqrt((n - 1) * (stdDev^2 / lowerChi))
cat("95% Confidence Interval for the experimental group: (",
round(lowerBound, 4), ", ",
round(upperBound, 4), ")\n")
F = var.test(control, exp, alternative = "greater")
cat("F-statistic:", round(F$statistic, 4), "\n")
cat("Degrees of freedom:", F$parameter[1], "and", F$parameter[2], "\n")
cat("p-value:", round(F$p.value, 4), "\n")
# Given data
x1 = 69
n1 = 21000
x2 = 113
n2 = 22000
proportion1 <- x1 / n1
proportion2 <- x2 / n2
stdError <- sqrt((proportion1 * (1 - proportion1)) / n1 + (proportion2 * (1 - proportion2)) / n2)
z <- qnorm(1 - 0.01 / 2)
lowerBound <- (proportion1 - proportion2) - z * stdError
upperBound <- (proportion1 - proportion2) + z * stdError
cat("99% Confidence Interval for the difference in proportions: (",
round(lowerBound, 4), ", ",
round(upperBound, 4), ")\n")
#b
propsCombined = (x1 + x2) / (n1 + n2)
nullStdError = sqrt(propsCombined * (1 - propsCombined) * (1 / n1 + 1 / n2))
z = (proportion2 - proportion1) / nullStdError
p = 1 - pnorm(z)
cat("Test Statistic (z):", round(z, 4), "\n")
cat("p-value:", round(p, 4), "\n")
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b, ANOVA
anova = aov(Hours ~ Brand, data = batteries)
anova
data <- matrix(c(739, 70, 44, 853,
492, 130, 38, 660,
198, 143, 27, 368,
51,  84, 14, 149,
41, 114, 17, 172),
nrow = 5, byrow = TRUE)
rownames(data) = c("Under 50", "50–179", "180–499", "500–999", "1000 and over")
colnames(data) = c("Full Owner", "Part Owner", "Tenant", "Total")
# Remove the 'Total' column
data = data[, -4]
chiSqr = chisq.test(data)
cat("Chi-Square Test Results:\n")
print(chiSqr)
cat("\nObserved Counts:\n")
print(chiSqr$observed)
cat("\nExpected Counts:\n")
print(round(chiSqr$expected, 2))
# Observed data
observed = c(21, 28, 27, 40)  # Actual numbers of games lasting 4, 5, 6, and 7 games
total_series = sum(observed)
# Expected probabilities
probabilities = c(0.125, 0.25, 0.3125, 0.3125)
# Calculate expected frequencies
expected = probabilities * total_series
# Perform the chi-square goodness-of-fit test
chi_square_test = chisq.test(observed, p = probabilities, rescale.p = TRUE)
# Output the results
cat("Chi-Square Test Results:\n")
print(chi_square_test)
# Observed and expected values
cat("\nObserved Counts:\n")
print(observed)
cat("\nExpected Counts:\n")
print(round(expected, 2))
\sigma()
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b
anova = aov(Hours ~ Brand, data = batteries)
anova
summary.aov(anova)
data <- matrix(c(739, 70, 44, 853,
492, 130, 38, 660,
198, 143, 27, 368,
51,  84, 14, 149,
41, 114, 17, 172),
nrow = 5, byrow = TRUE)
rownames(data) = c("Under 50", "50–179", "180–499", "500–999", "1000 and over")
colnames(data) = c("Full Owner", "Part Owner", "Tenant", "Total")
data = data[, -4]
chiSqr = chisq.test(data)
cat("Chi-Square Test Results:\n")
print(chiSqr)
cat("\nObserved Counts:\n")
print(chiSqr$observed)
cat("\nExpected Counts:\n")
print(round(chiSqr$expected, 4))
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b
anova = aov(Hours ~ Brand, data = batteries)
summary(anova)
batteries = read.delim("battery.txt", header = T, sep = ",")
Brand = batteries$Brand
Hours = batteries$Hours
# a
brandMean = tapply(Hours, Brand, mean)
brandStdDev = tapply(Hours, Brand, sd)
brandN = tapply(Hours, Brand, length)
brandMean
brandStdDev
brandN
# b
anova = aov(Hours ~ Brand, data = batteries)
summary(anova)
observed = c(21, 28, 27, 40)
totalSeries = sum(observed)
probabilities = c(0.125, 0.25, 0.3125, 0.3125)
expected = probabilities * totalSeries
expected
chiSqr = chisq.test(observed, p = probabilities, rescale.p = TRUE)
cat("Chi-Square Test Results:\n")
print(chiSqr)
criticalValue5 = qchisq(0.95, 3)
round(criticalValue5, 4)
criticalValue10 = qchisq(0.90, 3)
round(criticalValue10, 4)
observed = c(21, 28, 27, 40)
totalSeries = sum(observed)
probabilities = c(0.125, 0.25, 0.3125, 0.3125)
expected = probabilities * totalSeries
cat("Expected: ")
expected
chiSqr = chisq.test(observed, p = probabilities, rescale.p = TRUE)
cat("Chi-Square Test Results:\n")
print(chiSqr)
criticalValue5 = qchisq(0.95, 3)
round(criticalValue5, 4)
criticalValue10 = qchisq(0.90, 3)
round(criticalValue10, 4)
data = read.delim("ex11.3.txt", sep = ",")
data = read.delim("ex11-3.txt", sep = ",")
xValues = c(1, 2, 3, 4, 5)  # Replace with actual x values
yValues = c(2, 4, 5, 4, 5)  # Replace with actual y values
# Create a scatter plot
plot(xValues, yValues,
main = "Scatter Plot with Least Squares Regression Line",
xlab = "X-axis Label",  # Replace with a meaningful label
ylab = "Y-axis Label",  # Replace with a meaningful label
pch = 19, col = "blue")
# Perform linear regression
model = lm(yValues ~ xValues)
abline(model, col = "red", lwd = 2)
# Display regression equation and summary
summary(model)
data = read.delim("ex11-3.txt", sep = ",", header = T)
xValues = c(data$X.x.)  # Replace with actual x values
yValues = c(2, 4, 5, 4, 5)  # Replace with actual y values
# Create a scatter plot
plot(xValues, yValues,
main = "Scatter Plot with Least Squares Regression Line",
xlab = "X-axis Label",  # Replace with a meaningful label
ylab = "Y-axis Label",  # Replace with a meaningful label
pch = 19, col = "blue")
data = read.delim("ex11-3.txt", sep = ",", header = T)
xValues = c(1, 2, 3, 4,5)  # Replace with actual x values
yValues = c(2, 4, 5, 4, 5)  # Replace with actual y values
# Create a scatter plot
plot(xValues, yValues,
main = "Scatter Plot with Least Squares Regression Line",
xlab = "X-axis Label",  # Replace with a meaningful label
ylab = "Y-axis Label",  # Replace with a meaningful label
pch = 19, col = "blue")
# Perform linear regression
model = lm(yValues ~ xValues)
abline(model, col = "red", lwd = 2)
# Display regression equation and summary
summary(model)
data = read.delim("ex11-3.txt", sep = ",", header = T)
xValues = data$X.x.
yValues = data$X.y.
plot(xValues, yValues,
main = "Scatter Plot with Least Squares Regression Line",
xlab = "X-axis Label",  # Replace with a meaningful label
ylab = "Y-axis Label",  # Replace with a meaningful label
pch = 19, col = "blue")
model = lm(yValues ~ xValues)
abline(model, col = "red", lwd = 2)
summary(model)
values = read.delim("ex11-22.txt", sep = ",", header = TRUE)
treadmillTime = value
values = read.delim("ex11-22.txt", sep = ",", header = TRUE)
treadmillTime = values
raceTime <- c(36.5, 35.2, 39.1, 37.8, 36.3, 35.8, 38.9, 36.0, 35.0, 37.5)  # Example race times
# a. Plot the data in a scatter plot
plot(treadmill_time, race_time,
main = "Scatter Plot of Treadmill Time vs Race Time",
xlab = "Treadmill Time (minutes)",
ylab = "Race Time (minutes)",
pch = 19, col = "blue")
values = read.delim("ex11-22.txt", sep = ",", header = TRUE)
treadmillTime = values
raceTime <- c(36.5, 35.2, 39.1, 37.8, 36.3, 35.8, 38.9, 36.0, 35.0, 37.5)  # Example race times
# a. Plot the data in a scatter plot
plot(treadmillTime, raceTime,
main = "Scatter Plot of Treadmill Time vs Race Time",
xlab = "Treadmill Time (minutes)",
ylab = "Race Time (minutes)",
pch = 19, col = "blue")
values = read.delim("ex11-22.txt", sep = ",", header = TRUE)
treadmillTime = values$X.Treadmill.
raceTime  = values$X.10.K.
# a
plot(treadmillTime, raceTime,
main = "Scatter Plot of Treadmill Time vs Race Time",
xlab = "Treadmill Time (minutes)",
ylab = "Race Time (minutes)",
pch = 19, col = "blue")
# b
model = lm(raceTime ~ treadmillTime)
abline(model, col = "red", lwd = 2)
# c
summary(model)
b0 = coef(model)[1]  # Intercept
b1 = coef(model)[2]  # Slope
cat("The estimated regression model is: ŷ = ", round(b0, 2), " + ", round(b1, 2), "x\n")
