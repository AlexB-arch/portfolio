a2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = pnorm(b1, 0, 1)
b2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = 1 - pnorm(c1, 0, 1)
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = 1 - pnorm(c1, 0, 1)
c2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = a2 - c2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = c2 - a2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = b2 - a2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = b2 - c2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = c2 - b2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = b2 - c2
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = pnorm(b1) - pnorm(c1)
d
# mean = 513, sd = 130
a1 = (600 - 513)/130
a2 = 1 - pnorm(a1, 0, 1)
a2
b1 = (700 - 513)/130
b2 = 1 - pnorm(b1, 0, 1)
b2
c1 = (450 - 513)/130
c2 = pnorm(c1, 0, 1)
c2
d = pnorm(a1) - pnorm(c1)
d
z = (520 - 500)/(60 / sqrt(32))
z
q = qnorm(0.1)
q
a = (520 - 500)/(60 / sqrt(32))
a
critVal = qnorm(.99)
critVal
a = (520 - 500)/(60 / sqrt(32))
a
alpha = 0.1/2
alpha
critVal = qnorm(.95)
critVal
pVal = 1 - pnorm(a)
pVal
a = (520 - 500)/(60 / sqrt(32))
a
alpha = 0.1/2
alpha
critVal = qnorm(.995)
critVal
pVal = 1 - pnorm(a)
pVal
n = 32
alpha = 0.01
stdDev = 60
mu = 500
sampleMean = 520
lowerRange = mu - criticalValue * (stdDev / sqrt(n))
n = 32
alpha = 0.01
stdDev = 60
mu = 500
sampleMean = 520
criticalValue = qnorm(1 - (alpha/2))
lowerRange = mu - criticalValue * (stdDev / sqrt(n))
upperRange = mu + criticalValue * (stdDev / sqrt(n))
# List of values
values = c(450, 460, 470, 480, 490, 510, 520, 530, 540, 550)
powers = sapply(values, function(mu) {
lowerB = pnorm(lowerRange, mean = mu, sd = stdDev / sqrt(n))
upperB = pnorm(upperRange, mean = mu, sd = stdDev / sqrt(n))
beta = upperB - lowerB
power = 1 - beta
return(power)
})
data.frame(mu = values, Power = powers)
n = 64
sampleMean = 525
stdDev = 60
alpha = 0.01
criticalValue = qnorm(1 - (alpha/2))
lowerRange = mu - criticalValue * (stdDev / sqrt(n))
upperRange = mu + criticalValue * (stdDev / sqrt(n))
B = pnorm(upperRange, mean = muAlt, sd = stdDev / sqrt(n)) -
pnorm(lowerRange, mean = muAlt, sd = stdDev / sqrt(n))
n = 64
mu = 500
sampleMean = 525
stdDev = 60
alpha = 0.01
criticalValue = qnorm(1 - (alpha/2))
lowerRange = mu - criticalValue * (stdDev / sqrt(n))
upperRange = mu + criticalValue * (stdDev / sqrt(n))
B = pnorm(upperRange, mean = mu, sd = stdDev / sqrt(n)) -
pnorm(lowerRange, mean = mu, sd = stdDev / sqrt(n))
cat("Probability of Type II Error:", B, "\n")
n = 64
mu = 500
muAlt = 525
sampleMean = 525
stdDev = 60
alpha = 0.01
criticalValue = qnorm(1 - (alpha/2))
lowerRange = mu - criticalValue * (stdDev / sqrt(n))
upperRange = mu + criticalValue * (stdDev / sqrt(n))
B = pnorm(upperRange, mean = muAlt, sd = stdDev / sqrt(n)) -
pnorm(lowerRange, mean = muAlt, sd = stdDev / sqrt(n))
cat("Probability of Type II Error:", B, "\n")
alpha = 0.01
stdDev = 60
mu = 520
sampleMean = 520
criticalValue = qnorm(1 - (alpha/2))
newB = 0.04
B = qnorm(1 - newB)
findN = ((criticalValue + B) * stdDev / (mu - 500))^2
findN = ceiling(findN)
cat("Required Sample Size to achieve Beta <= 0.04:", findN, "\n")
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
errorMargin = criticalValue
errorMargin
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
errorMargin = criticalValue * (popStdDev/sqrt(n))
errorMargin
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
errorMargin = criticalValue * (popStdDev/sqrt(n))
errorMargin
lowerErrorMargin = sampleMean - errorMargin
upperErrorMargin = sampleMean + errorMargin
lowerErrorMargin
upperErrorMargin
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
errorMargin = criticalValue * (popStdDev/sqrt(n))
errorMargin
lowerErrorMargin = sampleMean - errorMargin
upperErrorMargin = sampleMean + errorMargin
cat("95% Confidence Interval: (", lowerErrorMargin, ",", upperErrorMargin, ")\n")
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha))
criticalValue
errorMargin = criticalValue * (popStdDev/sqrt(n))
errorMargin
lowerErrorMargin = sampleMean - errorMargin
upperErrorMargin = sampleMean + errorMargin
cat("95% Confidence Interval: (", lowerErrorMargin, ",", upperErrorMargin, ")\n")
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha/2))
criticalValue
errorMargin = criticalValue * (popStdDev/sqrt(n))
errorMargin
lowerErrorMargin = sampleMean - errorMargin
upperErrorMargin = sampleMean + errorMargin
cat("95% Confidence Interval: (", lowerErrorMargin, ",", upperErrorMargin, ")\n")
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
criticalValue = qnorm(1 - (alpha))
criticalValue
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
testStatistic_z = sampleMean - popMean / (popStdDev/sqrt(n))
testStatistic_z
criticalValue = qnorm(1 - (alpha))
criticalValue
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
z = sampleMean - popMean / (popStdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(testStatistic_z)
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
z = sampleMean - popMean / (popStdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(testStatistic_z)
p
n = 40
sampleMean = 47
popMean = 41
popStdDev = 35
alpha = 0.05
z = sampleMean - 41 / (popStdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(testStatistic_z)
p
n = 40
sampleMean = 47
mu = 41
StdDev = 35
alpha = 0.05
z = sampleMean - mu / (StdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(z)
p
n = 40
sampleMean = 47
mu = 41
StdDev = 35
alpha = 0.05
z = (sampleMean - mu) / (StdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(z)
p
n = 40
sampleMean = 47
mu = 41
StdDev = 35
alpha = 0.05
z = (sampleMean - mu) / (StdDev/sqrt(n))
z
criticalValue = qnorm(1 - (alpha))
criticalValue
p = 1 - pnorm(z)
p
reject = z > criticalValue
reject
coli <- read.csv("~/Downloads/377-coli.txt")
View(coli)
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "Greater", paired = T, conf.level = 0.95)
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
coli = read.csv(/Users/alexb/Downloads)
coli = read.csv("/Users/alexb/Downloads/377.coli")
coli = read.csv("/Users/alexb/Downloads/377-coli")
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
t = t.test(coli$housing, coli$groceries, alternative = "greater", paired = T, conf.level = 0.95)
t
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
t = t.test(coli$housing,
coli$groceries,
alternative = "greater",
paired = T,
conf.level = 0.95)
t
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
n = length(coli)
n
t = t.test(coli$housing,
coli$groceries,
alternative = "greater",
paired = T,
conf.level = 0.95)
t
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
n = length(coli$MetroArea)
n
t = t.test(coli$housing,
coli$groceries,
alternative = "greater",
paired = T,
conf.level = 0.95)
t
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
n = 36
t = t.test(coli$housing,
coli$groceries,
alternative = "greater",
paired = T,
conf.level = 0.95)
t
stdDev = sd(coli)
coli = read.csv("/Users/alexb/Downloads/377-coli.txt")
attach(coli)
n = 36
t = t.test(coli$housing,
coli$groceries,
alternative = "greater",
paired = T,
conf.level = 0.95)
t
meanDiff = 4.2777786
stdDev = sd(meanDiff)
stdDev
# Given data
field_A = c(8.1, 8.5, 8.4, 7.3, 8.0, 7.1, 13.9, 12.2, 13.4, 11.3, 12.6, 12.6, 12.7, 12.4, 11.3, 12.5)
field_B = c(10.2, 10.7, 15.5, 10.4, 9.9, 10.0, 16.6, 15.1, 15.2, 13.8, 14.1, 11.4, 11.5, 11.0)
# Sample sizes
nA = length(field_A)
nB = length(field_B)
# Sample means
meanA = mean(field_A)
meanB = mean(field_B)
# Sample standard deviations
sdA = sd(field_A)
sdB = sd(field_B)
s_p = sqrt(((nA - 1) * sA^2 + (nB - 1) * sB^2) / (nA + nB - 2))
# Given data
field_A = c(8.1, 8.5, 8.4, 7.3, 8.0, 7.1, 13.9, 12.2, 13.4, 11.3, 12.6, 12.6, 12.7, 12.4, 11.3, 12.5)
field_B = c(10.2, 10.7, 15.5, 10.4, 9.9, 10.0, 16.6, 15.1, 15.2, 13.8, 14.1, 11.4, 11.5, 11.0)
nA = length(field_A)
nB = length(field_B)
meanA = mean(field_A)
meanB = mean(field_B)
sdA = sd(field_A)
sdB = sd(field_B)
s_p = sqrt(((nA - 1) * sdA^2 + (nB - 1) * sdB^2) / (nA + nB - 2))
t_statistic = (meanA - meanB) / (s_p * sqrt(1/nA + 1/nB))
df <- nA + nB - 2
alpha <- 0.05
criticalValue <- qt(1 - alpha, df)
# p-value for the test statistic (one-tailed)
p <- pt(t_statistic, df)
# Results
cat("Test Statistic (t):", t_statistic, "\n")
cat("Critical Value:", criticalValue, "\n")
cat("p-value:", p, "\n")
# Decision
if (t_statistic < t_critical) {
cat("Decision: Reject H0\n")
} else {
cat("Decision: Fail to reject H0\n")
}
